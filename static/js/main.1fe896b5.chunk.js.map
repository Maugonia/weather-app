{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","clasName","onSubmit","submit","className","type","value","onChange","change","placeholder","id","Result","weather","date","city","latitude","longitude","sunrise","sunset","temp","temp_min","temp_max","pressure","wind","humidity","clouds","weather_iconID","weather_desc","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","class","src","Math","floor","clasname","APIKey","App","state","imBusy","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","console","log","API","axios","get","then","response","data","time","toLocaleString","coord","lon","lat","sys","main","speed","description","icon","catch","prevState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1fe896b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Form.css\"\r\nconst  Form = props => {\r\n    return (  \r\n     <div clasName=\"myForm\">\r\n        <form onSubmit={props.submit}>\r\n              <div className=\"input-group mb-3\">\r\n              {/* <div class=\"col-2\"> */}\r\n            <input \r\n            type=\"text\" className=\"form-control\"\r\n            value={props.value}\r\n            onChange={props.change}\r\n            placeholder=\"City\"\r\n            />\r\n           \r\n\r\n            <div className=\"input-group-append\">\r\n            <button className=\"btn btn-dark\" id=\"button-addon2\">Search city</button>\r\n            </div>\r\n         \r\n            </div>\r\n        </form>\r\n        </div>\r\n    \r\n    );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport { all } from 'q';\r\nimport \"./Result.css\"\r\n\r\nconst Result = (props) => {\r\n    const {\r\n    date,\r\n    city,\r\n    longitude,\r\n    latitude,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    temp_min,\r\n    temp_max,\r\n    pressure,\r\n    wind,\r\n    humidity,\r\n    clouds, \r\n    weather_desc,\r\n\tweather_iconID,\r\n    err} =props.weather\r\n    \r\n    let content = null;\r\n\r\n    if(!err && city){\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString()\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\r\n        content = (\r\n            <div className=\"Resultat\">\r\n                <div className=\"City-time\">\r\n                <h4>{city}</h4>\r\n                <h6>{date}</h6>\r\n                </div>\r\n\r\n                <div className = \"Localisation\">\r\n                <h6><i class=\"fas fa-map-marker-alt\"></i> {longitude, latitude}</h6>\r\n                </div>\r\n               \r\n                <div className = \"Clouds\">\r\n                <img src={`https://openweathermap.org/img/wn/${weather_iconID}@2x.png`}/>\r\n                <h3> {clouds} </h3>\r\n                </div>\r\n                \r\n                <div className = \"Temp0\">\r\n                    \r\n                <h1>{Math.floor(temp)}</h1>\r\n                <h2>&#176;</h2>\r\n                </div>\r\n               \r\n\r\n               <div className = \"Temp\">\r\n                <h4>{Math.floor(temp_min)} &#176;C</h4>\r\n                <hr class=\"Line\"></hr>\r\n                <h4>{Math.floor(temp_max)} &#176;C</h4>\r\n                </div>\r\n\r\n            <div className =\"Sun\">\r\n                <div clasname = \"sun-icon\">\r\n                <h6><i class=\"fas fa-sun\"></i> {sunriseTime}</h6>\r\n               </div>\r\n\r\n               <div className = \"moon-icon\">\r\n                <h6><i class=\"fas fa-moon\"></i> {sunsetTime}</h6>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className = \"group1\">\r\n                <div className = \"wind-icon\">\r\n                <h6><i class=\"fas fa-wind\"></i></h6><h6>{wind} km/h</h6>\r\n                </div>\r\n                <div className= \"pressure-icon\">\r\n                <h6><i class=\"fas fa-compass\"></i></h6><h6>{pressure} hPa</h6>\r\n                </div>\r\n                <div className = \"humidity-icon\">\r\n                <h6><i class=\"fas fa-tint\"></i></h6><h6>{humidity} %</h6>\r\n                </div>\r\n            </div>\r\n\r\n           \r\n\r\n            </div>\r\n\r\n           \r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return ( \r\n        <div className=\"result\">\r\n      {err ? `Sorry, we couldn't find ${city}` : content}\r\n        </div>\r\n\r\n        );\r\n}\r\n \r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport axios from \"axios\"\nimport './App.css';\n\n// Klucz do API\nconst APIKey = 'db21ea10a65548c2e76d7ad310b156e0'\n\n\nclass App extends Component {\n\tstate = {\n\t\tvalue: '',\n\t\tdate: '',\n\t\tcity: '',\n\t\tlongitude: '',\n\t\tlatitude: '',\n\t\tsunrise: '',\n\t\tsunset: '',\n\t\ttemp: '',\n\t\ttemp_min: '',\n\t\ttemp_max: '',\n\t\tpressure: '',\n\t\twind: '',\n\t\thumidity: '',\n\t\tclouds: '',\n\t\tweather_desc: '',\n\t\tweather_iconID: '',\n\t\terr: false,\n\t\timBusy: false\n\t};\n\n\thandleInputChange = e => {\n\t\tthis.setState({\n\t\t\tvalue: e.target.value,\n\t\t});\n\t};\n\n\thandleCitySubmit = e => {\n\t\te.preventDefault();\n\t\tconsole.log('potwierdzony formularz');\n\t\tthis.setState({\n\t\t\timBusy: true,\n\t\t});\n\t\tconst API =\n\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n\n\n\t\n\t\t\taxios.get(API)\n\t\t\t\t.then((response)=>{\n\t\t\t\t\tconsole.log(response.data)\n\t\t\t\t\treturn response.data\n\t\t\t})\n\t\t\t.then(data => {\n\n\t\t\n\t\t\t\tconst time = new Date().toLocaleString()\n\t\t\t\tthis.setState(state => ({\n\t\t\t\t\terr: false,\n\t\t\t\t\timBusy: false,\n\t\n\t\t\t\t\tdate: time,\n\t\t\t\t\tcity: state.value,\n\t\t\t\t\tlongitude: data.coord.lon,\n\t\t\t\t\tlatitude: data.coord.lat,\n\t\t\t\t\tsunrise: data.sys.sunrise,\n\t\t\t\t\tsunset: data.sys.sunset,\n\t\t\t\t\ttemp: data.main.temp,\n\t\t\t\t\ttemp_min: data.main.temp_min,\n\t\t\t\t\ttemp_max: data.main.temp_max,\n\t\t\t\t\tpressure: data.main.pressure,\n\t\t\t\t\twind: data.wind.speed,\n\t\t\t\t\thumidity: data.main.humidity,\n\t\t\t\t\tclouds: data.weather[0].main,\n\t\t\t\t\tweather_desc: data.weather[0].description,\n\t\t\t\t\tweather_iconID:data.weather[0].icon\n\t\t\t\t}))\n\n\t\t\t})\n\n\t\t.catch(err => {\n\t\t\tconsole.log(err);\n\t\t\tthis.setState(prevState => ({\n\t\t\t\terr: true,\n\t\t\t\timBusy: false,\n\t\t\t\tcity: prevState.value\n\t\t\t}))\n\t\t\n\t\t})\n\t}\n\n\trender() {\n\t\tif ( this.state.imBusy){\n\t\t\treturn (\n\t\t<div> loading...</div>\n\t\t\t)\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"Container\">\n\t\t\t\t<Form \n\t\t\t\tvalue={this.state.value} \n\t\t\t\tchange={this.handleInputChange} \n\t\t\t\tsubmit={this.handleCitySubmit} \n\t\t\t\t/>\n\t\t\t\t\n\t\t\n\t\t\t\t<Result weather={this.state}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n\n// fetch(API)\n\t// \t// .then(response => console.log(response))\n\t// \t// .catch(err => console.log(err))\n\t// \t.then(response => {\n\t// \t\tif(response.ok){\n\t// \t\t\treturn response\n\t// \t\t}\n\t// \t\tthrow Error(\"nie udało się\")\n\t// \t})\n\t// \t.then(response => response.json())\n\t// \t// .then(data => console.log(data))\n\t\t// .then(data => {\n\n\t\t// \tconst time = new Date().toLocaleString()\n\t\t// \tthis.setState(state => ({\n\t\t// \t\terr: false,\n\n\t\t// \t\tdate: time,\n\t\t// \t\tcity: state.value,\n\t\t// \t\tlongitude: data.coord.lon,\n\t\t// \t\tlatitude: data.coord.lat,\n\t\t// \t\tsunrise: data.sys.sunrise,\n\t\t// \t\tsunset: data.sys.sunset,\n\t\t// \t\ttemp: data.main.temp,\n\t\t// \t\ttemp_min: data.main.temp_min,\n\t\t// \t\ttemp_max: data.main.temp_max,\n\t\t// \t\tpressure: data.main.pressure,\n\t\t// \t\twind: data.wind.speed,\n\t\t// \t\thumidity: data.main.humidity,\n\t\t// \t\tclouds: data.clouds,\n\t\t// \t}))\n\t// \t})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}